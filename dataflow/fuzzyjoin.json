{
	"name": "fuzzyjoin",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fuzzyjoin_dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "fuzzyemp2_dataset",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fuzzy1_dataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as integer,",
				"          empname as string,",
				"          depid as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          empname as string,",
				"          depid as integer,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 join(fuzzyCompare(source1@empname, source2@empname, 86.00),",
				"     joinType:'inner',",
				"     matchType:'fuzzy',",
				"     ignoreSpaces: false,",
				"     scoreColumn:'Similarity_emp_name',",
				"     broadcast: 'off')~> join1",
				"join1 select(mapColumn(",
				"          empid,",
				"          empname = source1@empname,",
				"          depid = source1@depid,",
				"          empname_dep = source2@empname,",
				"          depid = source2@depid,",
				"          depname,",
				"          Similarity_emp_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          emp_id as string,",
				"          {name } as string,",
				"          gender as string,",
				"          doj as string,",
				"          depid as string,",
				"          isErrorRow as string,",
				"          hasErrordataformat as string,",
				"          hasErrornotunique as string,",
				"          hasErrornotexists as string",
				"     ),",
				"     partitionFileNames:['fuzzy.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          emp_id = empid",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}