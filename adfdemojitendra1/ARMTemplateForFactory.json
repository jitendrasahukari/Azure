{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfdemojitendra1"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"Handingerrorrows1_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Handingerrorrows1_linkedservice'"
		},
		"Test_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Test_linkedservice'"
		},
		"arraydep_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'arraydep_linkedservice'"
		},
		"assert_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'assert_linkedservice'"
		},
		"assertotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'assertotpt_linkedservice'"
		},
		"cachecountrycode_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'cachecountrycode_linkedservice'"
		},
		"cachesink_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'cachesink_linkedservice'"
		},
		"cachesinkinpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'cachesinkinpt_linkedservice'"
		},
		"cachesinkotpt_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'cachesinkotpt_linkedservice'"
		},
		"castotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'castotpt_linkedservice'"
		},
		"copyacbfrcachesink_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copyacbfrcachesink_linkedservice'"
		},
		"copyacbfrcachesinkotpt_linkedserice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'copyacbfrcachesinkotpt_linkedserice'"
		},
		"copyallfiles_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copyallfiles_linkedservice'"
		},
		"copyallfilesotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copyallfilesotpt_linkedservice'"
		},
		"copysessionlogging_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copysessionlogging_linkedservice'"
		},
		"deleteactvtyscenario3_dataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'deleteactvtyscenario3_dataset'"
		},
		"deleteallc_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'deleteallc_linkedservice'"
		},
		"emailconfig_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'emailconfig_linkedservice'"
		},
		"emailconfig_linkedservice1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'emailconfig_linkedservice1'"
		},
		"fixedlengthtransform_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fixedlengthtransform_linkedservice'"
		},
		"flowemp1_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'flowemp1_linkedservice'"
		},
		"flowlet_dep_dataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'flowlet_dep_dataset'"
		},
		"flowletemp_dataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'flowletemp_dataset'"
		},
		"flowletotpt_dataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'flowletotpt_dataset'"
		},
		"fuzzyemp2_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fuzzyemp2_linkedservice'"
		},
		"fuzzyjoin_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fuzzyjoin_linkedservice'"
		},
		"fuzzyotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fuzzyotpt_linkedservice'"
		},
		"goodrows_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'goodrows_linkedservice'"
		},
		"incrementalfilecopy_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'incrementalfilecopy_linkedservice'"
		},
		"jsonotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'jsonotpt_linkedservice'"
		},
		"notcrctformat_linkedservcie_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'notcrctformat_linkedservcie'"
		},
		"parametarizelks_advanced_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parametarizelks_advanced'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:@{linkedService().Server},1433;Initial Catalog=@{linkedService().DBName};User ID=@{linkedService().user};Password=@{linkedService().password};Trusted_Connection=False"
		},
		"parsecoldata_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'parsecoldata_linkedservice'"
		},
		"parseotpt1_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parseotpt1_linkedservice'"
		},
		"parseotpt_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'parseotpt_linkedservice'"
		},
		"parsetrans_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'parsetrans_linkedservice'"
		},
		"parsetransotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parsetransotpt_linkedservice'"
		},
		"rtntopipe_dataset_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'rtntopipe_dataset'"
		},
		"rtntopipe_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'rtntopipe_linkedservice'"
		},
		"rtntopipeotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'rtntopipeotpt_linkedservice'"
		},
		"sales_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'sales_linkedservice'"
		},
		"stringify_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'stringify_linkedservice'"
		},
		"stringifyotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'stringifyotpt_linkedservice'"
		},
		"template1_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'template1_linkedservice'"
		},
		"template_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'template_linkedservice'"
		},
		"ttl_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ttl_linkedservice'"
		},
		"ttlotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ttlotpt_linkedservice'"
		},
		"udf_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'udf_linkedservice'"
		},
		"udfotpt_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'udfotpt_linkedservice'"
		},
		"logpipeline_linkedservice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'logpipeline_linkedservice'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsgen2jittuaccount.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://Scretes.vault.azure.net/"
		},
		"Testing_AKV_linkedservice_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://Scretes.vault.azure.net/"
		},
		"cachecountrycode_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"cachecountrycode_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"cachecountrycode_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"cachesink_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"cachesink_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"cachesink_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"cachesinkotpt_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"cachesinkotpt_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"cachesinkotpt_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"copyacbfrcachesinkotpt_linkedserice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"copyacbfrcachesinkotpt_linkedserice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"copyacbfrcachesinkotpt_linkedserice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"goodrows_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"goodrows_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"goodrows_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"notcrctformat_linkedservcie_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"notcrctformat_linkedservcie_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"notcrctformat_linkedservcie_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"parsecoldata_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"parsecoldata_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"parsecoldata_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"parseotpt_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"parseotpt_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"parseotpt_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"parsetrans_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"parsetrans_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"parsetrans_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"rtntopipe_dataset_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"rtntopipe_dataset_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"rtntopipe_dataset_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"sales_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"sales_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"sales_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		},
		"logpipeline_linkedservice_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "prodstd.database.windows.net"
		},
		"logpipeline_linkedservice_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TESTDB"
		},
		"logpipeline_linkedservice_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jitendra"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Delete files older than 5 days')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "template_linkedservice",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@{adddays(pipeline().TriggerTime, -4)}",
									"type": "Expression"
								},
								"wildcardFileName": "*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "sourcefolder"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "subfolder"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "loggingfolder/logfile"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDatasetForDeleteActivity')]",
				"[concat(variables('factoryId'), '/linkedServices/template_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handlingerrorrows1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Handingerrorrows1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Handingerrorrows1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesIND": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Handingerrorrows1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handlingerrorrows2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Handlingerrorrows2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Handlingerrorrows2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empsourcedata": {},
									"empdep": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Handlingerrorrows2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/asserttrans_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "assert_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "assert_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/assert_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesink_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cachesink",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cachesink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"cachedmaxempid": {},
									"cachedcountries": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cachesink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesinkotptwritetoactvty_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cachesinkotptwrittoactvty",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cachesinkotptwrittoactvty",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cachesinkotptwrittoactvty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxSalary",
							"value": {
								"value": "@activity('cachesinkotptwrittoactvty').output.runStatus.output.sink1.value[0].MaxEmpId",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"MaxSalary": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cachesinkotptwrittoactvty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyacbfrcachesink_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "copyacbfrcachesink_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "copyacbfrcachesinkotpt_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copyacbfrcachesink_dataset')]",
				"[concat(variables('factoryId'), '/datasets/copyacbfrcachesinkotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyactivitysessionlogging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "input",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "copysessionlogging_linkedservice",
										"type": "LinkedServiceReference"
									},
									"path": "azureactivitiescontainer/output3"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "copysessionlogging_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "copysessionloggingotpt_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copysessionlogging_dataset')]",
				"[concat(variables('factoryId'), '/datasets/copysessionloggingotpt_dataset')]",
				"[concat(variables('factoryId'), '/linkedServices/copysessionlogging_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyallfilestootpt_sc2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "copyallfiles_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "foreachfilename_dataset",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "copyallfileotpt_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copyallfiles_dataset')]",
				"[concat(variables('factoryId'), '/datasets/foreachfilename_dataset')]",
				"[concat(variables('factoryId'), '/datasets/copyallfileotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteallcsvfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "deleteallcsv_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/deleteallcsv_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteolderfiles_scenario3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "deleteactvtyscenario3_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@adddays(utcNow(), -3)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "deletefilename_dataset",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/deleteactvtyscenario3_dataset')]",
				"[concat(variables('factoryId'), '/datasets/deletefilename_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emailconfig_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "azureactivitiescontainer",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "emailconfig_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/emailconfig_dataset')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzy_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fuzzyjoin",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "fuzzyjoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fuzzyjoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incrementalcopyfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "incrementalfilecopy_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@adddays(utcnow(), -3)",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "incrementalcopyotpt_dataset",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "incremecopyotpt_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/incrementalfilecopy_dataset')]",
				"[concat(variables('factoryId'), '/datasets/incrementalcopyotpt_dataset')]",
				"[concat(variables('factoryId'), '/datasets/incremecopyotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonotptactvty_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "jsonotpt_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/jsonotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mainpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "returntopipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "returntopipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "returntopipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "rtntopipe_dataset",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into tbl_rtntopipe values ('@{activity('returntopipeline').output.pipelineReturnValue.pipelinename}','@{activity('returntopipeline').output.pipelineReturnValue.runid}')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/returntopipeline')]",
				"[concat(variables('factoryId'), '/linkedServices/rtntopipe_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "inlinedataset_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "inlinedataset_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/inlinedataset_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/returntopipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rtntopipe_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rtntopipeotpt_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "pipelinename",
									"value": {
										"type": "Expression",
										"content": "@pipeline().Pipeline"
									}
								},
								{
									"key": "runid",
									"value": {
										"type": "Expression",
										"content": "@pipeline().RunId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rtntopipe_dataset')]",
				"[concat(variables('factoryId'), '/datasets/rtntopipeotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ttl_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "timetolive",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "timetolive",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "timetolive1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "timetolive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "timetolive",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/timetolive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDatasetForDeleteActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your source store to delete files.",
				"linkedServiceName": {
					"referenceName": "template1_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/template1_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handingerrorrows1_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Handingerrorrows1_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SalesIND_2020_MAY_01.csv",
						"folderPath": "REALTIMESCENARIOS",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "saleDate",
						"type": "String"
					},
					{
						"name": "salesItem",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Handingerrorrows1_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handlingerrorrows2_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Handingerrorrows1_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "assert_data.csv",
						"folderPath": "REALTIMESCENARIOS",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Handingerrorrows1_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handlingerrorrowsdep_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Handingerrorrows1_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "assert_dep.csv",
						"folderPath": "REALTIMESCENARIOS",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depId",
						"type": "String"
					},
					{
						"name": "depName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Handingerrorrows1_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emailconfig_linkedservice1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "azureactivitiescontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emailconfig_linkedservice1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Test_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "lookup.csv",
						"container": "employee"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Test_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arraydep_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "arraydep_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "assert_dep.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depId",
						"type": "String"
					},
					{
						"name": "depName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/arraydep_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/assert_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "assert_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "assert_data.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/assert_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/assertotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "assertotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/assertotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/badrows_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sales_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "saleDate",
						"type": "varchar"
					},
					{
						"name": "salesItem",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fileName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_sales_bad"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sales_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachecountrycode_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cachecountrycode_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "country_code",
						"type": "varchar"
					},
					{
						"name": "country_name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_country"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cachecountrycode_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesink_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cachesink_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cachesink_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesinkinpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cachesinkinpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cachesink.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cachesinkinpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesinkotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cachesinkotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cachesinkotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/castotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "castotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/castotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyacbfrcachesink_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copyacbfrcachesink_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cachesink.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copyacbfrcachesink_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyacbfrcachesinkotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copyacbfrcachesinkotpt_linkedserice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copyacbfrcachesinkotpt_linkedserice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyallfileotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copyallfilesotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output_new_scenarios",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copyallfilesotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyallfiles_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copyallfiles_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copyallfiles_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copysessionlogging_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copysessionlogging_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copysessionlogging_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copysessionloggingotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copysessionlogging_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copysessionlogging_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/crctdata_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "notcrctformat_linkedservcie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "doj",
						"type": "date"
					},
					{
						"name": "depid",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "empdata_crct_format"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/notcrctformat_linkedservcie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteactvtyscenario3_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "deleteactvtyscenario3_dataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/deleteactvtyscenario3_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteallcsv_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "deleteallc_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/deleteallc_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deletefilename_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copyallfiles_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copyallfiles_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emailconfig_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emailconfig_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emailconfig_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowletemp_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "flowletemp_dataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "flowlet_emp_data.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/flowletemp_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowletotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "flowletotpt_dataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/flowletotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/foreachfilename_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copyallfiles_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copyallfiles_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzy1_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fuzzyotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fuzzyotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyemp2_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fuzzyemp2_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "fuzzy_emp2.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fuzzyemp2_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyjoin_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fuzzyjoin_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "fuzzy_emp1.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fuzzyjoin_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fuzzyotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fuzzyotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/goodrows_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sales_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "saleDate",
						"type": "date"
					},
					{
						"name": "salesItem",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "filename",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sales_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremecopyotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "incrementalfilecopy_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output_new_scenarios",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/incrementalfilecopy_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incrementalcopyotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "incrementalfilecopy_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/incrementalfilecopy_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incrementalfilecopy_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "incrementalfilecopy_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/incrementalfilecopy_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "jsonotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/jsonotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/noexists_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "notcrctformat_linkedservcie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "doj",
						"type": "date"
					},
					{
						"name": "depid",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "empdata_noexists_notcrctformat_rows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/notcrctformat_linkedservcie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/notcrctformat_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "notcrctformat_linkedservcie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "doj",
						"type": "varchar"
					},
					{
						"name": "depid",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emptbl_notcrct_format"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/notcrctformat_linkedservcie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/notunique_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "notcrctformat_linkedservcie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "doj",
						"type": "varchar"
					},
					{
						"name": "depid",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "empdata_notunique_notcrct_rows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/notcrctformat_linkedservcie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterizelks_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parametarizelks_advanced",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parametarizelks_advanced')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parsecoldata_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parsecoldata_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "nvarchar"
					},
					{
						"name": "skills",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parsecoldata_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parseotpt1_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parseotpt1_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parseotpt1_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parseotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parseotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_parse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parseotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parsetrans_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parsetrans_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "nvarchar"
					},
					{
						"name": "skills",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parsetrans_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parsetransotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parsetransotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parsetransotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rtntopipe_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rtntopipe_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rtntopipe_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rtntopipeotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rtntopipeotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rtntopipeotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringify_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stringify_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stringify.json",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"skills": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"contact": {
							"type": "object",
							"properties": {
								"mobile": {
									"type": "string"
								},
								"landline": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stringify_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringifyotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stringifyotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stringifyotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ttl_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ttl_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ttl_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ttlotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ttlotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ttlotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/udf_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "udf_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "udf_data.csv",
						"folderPath": "input",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/udf_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/udfotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "udfotpt_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output3",
						"container": "azureactivitiescontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name ",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "doj",
						"type": "String"
					},
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "isErrorRow",
						"type": "String"
					},
					{
						"name": "hasErrordataformat",
						"type": "String"
					},
					{
						"name": "hasErrornotunique",
						"type": "String"
					},
					{
						"name": "hasErrornotexists",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/udfotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handingerrorrows1_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Handingerrorrows1_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Test_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Testing_AKV_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Testing_AKV_linkedservice_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/arraydep_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('arraydep_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/assert_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('assert_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/assertotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('assertotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachecountrycode_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('cachecountrycode_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('cachecountrycode_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('cachecountrycode_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('cachecountrycode_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesink_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('cachesink_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('cachesink_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('cachesink_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('cachesink_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesinkinpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('cachesinkinpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesinkotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('cachesinkotpt_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('cachesinkotpt_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('cachesinkotpt_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('cachesinkotpt_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/castotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('castotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyacbfrcachesink_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('copyacbfrcachesink_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyacbfrcachesinkotpt_linkedserice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('copyacbfrcachesinkotpt_linkedserice_properties_typeProperties_server')]",
					"database": "[parameters('copyacbfrcachesinkotpt_linkedserice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('copyacbfrcachesinkotpt_linkedserice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('copyacbfrcachesinkotpt_linkedserice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyallfiles_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('copyallfiles_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyallfilesotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('copyallfilesotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copysessionlogging_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('copysessionlogging_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteactvtyscenario3_dataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('deleteactvtyscenario3_dataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteallc_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('deleteallc_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/emailconfig_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('emailconfig_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/emailconfig_linkedservice1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('emailconfig_linkedservice1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fixedlengthtransform_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('fixedlengthtransform_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowemp1_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('flowemp1_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet_dep_dataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('flowlet_dep_dataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowletemp_dataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('flowletemp_dataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowletotpt_dataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('flowletotpt_dataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyemp2_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('fuzzyemp2_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyjoin_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('fuzzyjoin_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('fuzzyotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/goodrows_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('goodrows_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('goodrows_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('goodrows_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('goodrows_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/incrementalfilecopy_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('incrementalfilecopy_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('jsonotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/notcrctformat_linkedservcie')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('notcrctformat_linkedservcie_properties_typeProperties_server')]",
					"database": "[parameters('notcrctformat_linkedservcie_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('notcrctformat_linkedservcie_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('notcrctformat_linkedservcie_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parametarizelks_advanced')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Server": {
						"type": "String"
					},
					"DBName": {
						"type": "String"
					},
					"user": {
						"type": "String"
					},
					"password": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('parametarizelks_advanced_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parsecoldata_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('parsecoldata_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('parsecoldata_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('parsecoldata_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('parsecoldata_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parseotpt1_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('parseotpt1_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parseotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('parseotpt_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('parseotpt_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('parseotpt_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('parseotpt_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parsetrans_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('parsetrans_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('parsetrans_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('parsetrans_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('parsetrans_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parsetransotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('parsetransotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rtntopipe_dataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('rtntopipe_dataset_properties_typeProperties_server')]",
					"database": "[parameters('rtntopipe_dataset_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('rtntopipe_dataset_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('rtntopipe_dataset_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rtntopipe_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('rtntopipe_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rtntopipeotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('rtntopipeotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('sales_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('sales_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('sales_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('sales_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringify_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('stringify_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringifyotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('stringifyotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/template1_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('template1_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/template_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('template_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ttl_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ttl_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ttlotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ttlotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/udf_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('udf_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/udfotpt_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('udfotpt_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-new-ttl')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 30,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handingerrorrows1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Handingerrorrows1_dataset",
								"type": "DatasetReference"
							},
							"name": "SalesIND"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "badrows_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "goodrows_dataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          saleDate as string,",
						"          salesItem as string,",
						"          country as string,",
						"          quantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesIND",
						"SalesIND split(isNull(toDate(saleDate, 'dd-MMM-YYYY')),",
						"     disjoint: false) ~> split1@(BadRows, GoodRows)",
						"split1@GoodRows derive(saleDate = toDate(saleDate, 'dd-MMM-yyyy'),",
						"          filename = 'SalesIND_2020_MAY_01.csv') ~> derivedColumn1",
						"split1@BadRows derive(filename = 'SalesIND_2020_MAY_01.csv') ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          saleDate as string,",
						"          salesItem as string,",
						"          country as string,",
						"          quantity as integer,",
						"          fileName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          saleDate,",
						"          salesItem,",
						"          country,",
						"          quantity,",
						"          fileName = filename",
						"     )) ~> sink1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          saleDate as date,",
						"          salesItem as string,",
						"          country as string,",
						"          quantity as integer,",
						"          filename as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          saleDate,",
						"          salesItem,",
						"          country,",
						"          quantity,",
						"          filename",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Handingerrorrows1_dataset')]",
				"[concat(variables('factoryId'), '/datasets/badrows_dataset')]",
				"[concat(variables('factoryId'), '/datasets/goodrows_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Handlingerrorrows2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Handlingerrorrows2_dataset",
								"type": "DatasetReference"
							},
							"name": "empsourcedata"
						},
						{
							"dataset": {
								"referenceName": "Handlingerrorrowsdep_dataset",
								"type": "DatasetReference"
							},
							"name": "empdep"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "notcrctformat_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "notunique_dataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "noexists_dataset",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "crctdata_dataset",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "assert1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Notunique"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empsourcedata",
						"source(output(",
						"          depId as integer,",
						"          depName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdep",
						"empsourcedata, empdep assert(expectTrue(!isNull(toDate(doj, 'yyyyMMdd')), false, 'assert1', null, 'for good rows filtering'),",
						"     expectUnique(emp_id, false, 'assert2', null, 'for duplicate rows'),",
						"     expectExists(empsourcedata@depid == empdep@depId, false, 'assert3', null, 'For existence check in another table')) ~> assert1",
						"assert1 derive(NotCrctFormat = isError(),",
						"          NotUnique = hasError('assert2'),",
						"          NotExists = hasError('assert3')) ~> derivedColumn1",
						"derivedColumn1 split(NotCrctFormat == true(),",
						"     NotUnique == true(),",
						"     NotExists == true(),",
						"     NotCrctFormat == false() && NotUnique == false() && NotExists == false(),",
						"     disjoint: true) ~> Notunique@(NotCrctFormat, Notunique, NotExists, correctdata)",
						"Notunique@NotCrctFormat select(mapColumn(",
						"          emp_id,",
						"          {empname } = {name },",
						"          gender,",
						"          doj,",
						"          depid = Notunique@NotCrctFormat@depid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Notunique@Notunique select(mapColumn(",
						"          emp_id,",
						"          {empname } = {name },",
						"          gender,",
						"          doj,",
						"          depid = Notunique@Notunique@depid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Notunique@NotExists select(mapColumn(",
						"          emp_id,",
						"          {empname } = {name },",
						"          gender,",
						"          doj,",
						"          depid = Notunique@NotExists@depid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"Notunique@correctdata select(mapColumn(",
						"          emp_id,",
						"          {empname } = {name },",
						"          gender,",
						"          doj,",
						"          depid = Notunique@correctdata@depid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4 derive(doj = toDate(doj, 'yyyyMMdd')) ~> derivedColumn2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as integer,",
						"          name as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid = emp_id,",
						"          name = {empname },",
						"          gender,",
						"          doj,",
						"          depid",
						"     )) ~> sink1",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          empname as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          empname as string,",
						"          gender as string,",
						"          doj as date,",
						"          depid as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          empname as string,",
						"          gender as string,",
						"          doj as date,",
						"          depid as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink4"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Handlingerrorrows2_dataset')]",
				"[concat(variables('factoryId'), '/datasets/Handlingerrorrowsdep_dataset')]",
				"[concat(variables('factoryId'), '/datasets/notcrctformat_dataset')]",
				"[concat(variables('factoryId'), '/datasets/notunique_dataset')]",
				"[concat(variables('factoryId'), '/datasets/noexists_dataset')]",
				"[concat(variables('factoryId'), '/datasets/crctdata_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StringFunctions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"gendertointeger(string) as integer = iif(i1 == 'male',1,iif(i1 == 'female',0,-1))"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/assert_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "assert_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "arraydep_dataset",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "assertotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "assert1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          depId as string,",
						"          depName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 assert(expectTrue(!isNull(toDate(doj, 'yyyyMMdd')), false, 'assert1'),",
						"     expectUnique(emp_id, false, 'assert2'),",
						"     expectExists(source1@depid == source2@depId, false, 'assert3')) ~> assert1",
						"assert1 derive(isErrorRow = isError(),",
						"          hasErrordataformat = hasError('assert1'),",
						"          hasErrornotunique = hasError('assert2'),",
						"          hasErrornotexists = hasError('assert3')) ~> derivedColumn1",
						"derivedColumn1 filter(isErrorRow == false()) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as string",
						"     ),",
						"     partitionFileNames:['assertotpt.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/assert_dataset')]",
				"[concat(variables('factoryId'), '/datasets/arraydep_dataset')]",
				"[concat(variables('factoryId'), '/datasets/assertotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cachesink_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "cachesinkinpt_dataset",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "cachecountrycode_dataset",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"name": "cachedmaxempid"
						},
						{
							"name": "cachedcountries"
						},
						{
							"dataset": {
								"referenceName": "cachesinkotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          maxEmpId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(emp_id) as maxEmpId from tbl_employee',",
						"     format: 'query') ~> source1",
						"source(output(",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          country_code as string,",
						"          country_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source2 keyGenerate(output(emp_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(emp_id = emp_id + cachedmaxempid#outputs()[1].maxEmpId,",
						"          country = toString(cachedcountries#lookup(country).country_name)) ~> derivedColumn1",
						"source1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          maxEmpId",
						"     )) ~> cachedmaxempid",
						"source3 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     keys:['country_code'],",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          country_code,",
						"          country_name",
						"     )) ~> cachedcountries",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_id,",
						"          emp_name = empname,",
						"          gender,",
						"          country,",
						"          salary",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cachesink_dataset')]",
				"[concat(variables('factoryId'), '/datasets/cachesinkinpt_dataset')]",
				"[concat(variables('factoryId'), '/datasets/cachecountrycode_dataset')]",
				"[concat(variables('factoryId'), '/datasets/cachesinkotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cachesinkotptwrittoactvty')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cachesink_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          MaxEmpId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(emp_id) as MaxEmpId from tbl_employee',",
						"     format: 'query') ~> source1",
						"source1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cachesink_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/casttransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fuzzyemp2_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "castotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empname as string,",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          depid as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string,",
						"          isErrorRow as string,",
						"          hasErrordataformat as string,",
						"          hasErrornotunique as string,",
						"          hasErrornotexists as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empname,",
						"          depid,",
						"          depname",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fuzzyemp2_dataset')]",
				"[concat(variables('factoryId'), '/datasets/castotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          depid as integer,",
						"          depname as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(empid,",
						"          empname,",
						"          gender,",
						"          depid,",
						"          depname),",
						"     count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          empid,",
						"          empname,",
						"          gender,",
						"          depid,",
						"          depname",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowletdfemp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "flowletemp_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "flowletotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowlet1",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 compose(mapColumn(",
						"          empid,",
						"          empname,",
						"          gender,",
						"          depid = empid,",
						"          depname = empname",
						"     ),",
						"     composition: 'flowlet1') ~> flowlet1@(output1)",
						"flowlet1@output1 select(mapColumn(",
						"          empid,",
						"          empname,",
						"          gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string,",
						"          isErrorRow as string,",
						"          hasErrordataformat as string,",
						"          hasErrornotunique as string,",
						"          hasErrornotexists as string",
						"     ),",
						"     partitionFileNames:['flowletotpt.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          emp_id = empid,",
						"          {name } = empname,",
						"          gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flowlet1')]",
				"[concat(variables('factoryId'), '/datasets/flowletemp_dataset')]",
				"[concat(variables('factoryId'), '/datasets/flowletotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyjoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fuzzyjoin_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "fuzzyemp2_dataset",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "fuzzy1_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          depid as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          empname as string,",
						"          depid as integer,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(fuzzyCompare(source1@empname, source2@empname, 86.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: false,",
						"     scoreColumn:'Similarity_emp_name',",
						"     broadcast: 'off')~> join1",
						"join1 select(mapColumn(",
						"          empid,",
						"          empname = source1@empname,",
						"          depid = source1@depid,",
						"          empname_dep = source2@empname,",
						"          depid = source2@depid,",
						"          depname,",
						"          Similarity_emp_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string,",
						"          isErrorRow as string,",
						"          hasErrordataformat as string,",
						"          hasErrornotunique as string,",
						"          hasErrornotexists as string",
						"     ),",
						"     partitionFileNames:['fuzzy.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          emp_id = empid",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fuzzyjoin_dataset')]",
				"[concat(variables('factoryId'), '/datasets/fuzzyemp2_dataset')]",
				"[concat(variables('factoryId'), '/datasets/fuzzy1_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inlinedataset_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "parseotpt_linkedservice",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "parseotpt_linkedservice",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'tbl_parse',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'inlineotpt',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          skill1,",
						"          skill2,",
						"          skill3,",
						"          City,",
						"          Country",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parseotpt_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringify_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stringify_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stringifyotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "stringify1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          contact as (landline as integer, mobile as integer),",
						"          name as string,",
						"          skills as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 stringify(Contact = contact ? string,",
						"     partitionBy('hash', 1),",
						"     format: 'json') ~> stringify1",
						"stringify1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as string",
						"     ),",
						"     partitionFileNames:['stringifyotpt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empname = name,",
						"          gender = skills,",
						"          country = name",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stringify_dataset')]",
				"[concat(variables('factoryId'), '/datasets/stringifyotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/timetolive')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ttl_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ttlotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string,",
						"          isErrorRow as string,",
						"          hasErrordataformat as string,",
						"          hasErrornotunique as string,",
						"          hasErrornotexists as string",
						"     ),",
						"     partitionFileNames:['ttlotpt.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ttl_dataset')]",
				"[concat(variables('factoryId'), '/datasets/ttlotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/udfdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "udf_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "udfotpt_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "StringFunctions",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(gender = gendertointeger(gender)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          {name } as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string,",
						"          isErrorRow as string,",
						"          hasErrordataformat as string,",
						"          hasErrornotunique as string,",
						"          hasErrornotexists as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StringFunctions')]",
				"[concat(variables('factoryId'), '/datasets/udf_dataset')]",
				"[concat(variables('factoryId'), '/datasets/udfotpt_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/logpipelinescenario6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipeline_log1]",
							"storedProcedureParameters": {
								"adfname": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggername": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggertime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"triggertype": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "logpipeline_linkedservice",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/logpipeline_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/logpipeline_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('logpipeline_linkedservice_properties_typeProperties_server')]",
					"database": "[parameters('logpipeline_linkedservice_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('logpipeline_linkedservice_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('logpipeline_linkedservice_password')]"
					}
				}
			},
			"dependsOn": []
		}
	]
}